# -*- coding: utf-8 -*-
"""HousePricePrediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CfPZr5AtGPfivU-sECilVNoDHvwr15Uc
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.tree import DecisionTreeRegressor, plot_tree
from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
from sklearn.preprocessing import StandardScaler
import tensorflow as tf

from google.colab import drive
drive.mount('/content/drive')

df = pd.read_csv('/content/drive/MyDrive/TAE-ML/Housing.csv')

max_price = df['price'].max()
print(max_price)

df.info()

df = pd.get_dummies(df, columns=['mainroad', 'guestroom', 'basement', 'hotwaterheating',
                                 'airconditioning', 'prefarea', 'furnishingstatus'])

scaler = StandardScaler()
X_scaled = scaler.fit_transform(df.drop(columns=['price']))
y = df['price']

# Data split 80-20
X_train_80, X_test_20, y_train_80, y_test_20 = train_test_split(X_scaled, y, test_size=0.2, random_state=42)
# Data split 70-30
X_train_70, X_test_30, y_train_70, y_test_30 = train_test_split(X_scaled, y, test_size=0.3, random_state=42)

# Linear Regression (80-20)
model_80 = LinearRegression()
model_80.fit(X_train_80, y_train_80)
y_pred_80 = model_80.predict(X_test_20)
print("Linear Regression (80-20 Split):")
print("MSE:", mean_squared_error(y_test_20, y_pred_80))
print("R2:", r2_score(y_test_20, y_pred_80))
print("MAE:", mean_absolute_error(y_test_20, y_pred_80))

# Linear Regression (70-30)
model_70 = LinearRegression()
model_70.fit(X_train_70, y_train_70)
y_pred_70 = model_70.predict(X_test_30)
print("Linear Regression (70-30 Split):")
print("MSE:", mean_squared_error(y_test_30, y_pred_70))
print("R2:", r2_score(y_test_30, y_pred_70))
print("MAE:", mean_absolute_error(y_test_30, y_pred_70))

# Decision Tree (80-20)
model_80 = DecisionTreeRegressor(random_state=42)
model_80.fit(X_train_80, y_train_80)
y_pred_80 = model_80.predict(X_test_20)
print("Decision Tree (80-20 Split):")
print("MSE:", mean_squared_error(y_test_20, y_pred_80))
print("R2:", r2_score(y_test_20, y_pred_80))
print("MAE:", mean_absolute_error(y_test_20, y_pred_80))

# Decision Tree (70-30)
model_70 = DecisionTreeRegressor(random_state=42)
model_70.fit(X_train_70, y_train_70)
y_pred_70 = model_70.predict(X_test_30)
print("Decision Tree (70-30 Split):")
print("MSE:", mean_squared_error(y_test_30, y_pred_70))
print("R2:", r2_score(y_test_30, y_pred_70))
print("MAE:", mean_absolute_error(y_test_30, y_pred_70))

# Random Forest (80-20)
model_80 = RandomForestRegressor(n_estimators=100, random_state=42)
model_80.fit(X_train_80, y_train_80)
y_pred_80 = model_80.predict(X_test_20)
print("Random Forest (80-20 Split):")
print("MSE:", mean_squared_error(y_test_20, y_pred_80))
print("R2:", r2_score(y_test_20, y_pred_80))
print("MAE:", mean_absolute_error(y_test_20, y_pred_80))

# Random Forest (70-30)
model_70 = RandomForestRegressor(n_estimators=100, random_state=42)
model_70.fit(X_train_70, y_train_70)
y_pred_70 = model_70.predict(X_test_30)
print("Random Forest (70-30 Split):")
print("MSE:", mean_squared_error(y_test_30, y_pred_70))
print("R2:", r2_score(y_test_30, y_pred_70))
print("MAE:", mean_absolute_error(y_test_30, y_pred_70))

# Gradient Boosting (80-20)
model_80 = GradientBoostingRegressor(n_estimators=100, learning_rate=0.1, random_state=42)
model_80.fit(X_train_80, y_train_80)
y_pred_80 = model_80.predict(X_test_20)
print("Gradient Boosting (80-20 Split):")
print("MSE:", mean_squared_error(y_test_20, y_pred_80))
print("R2:", r2_score(y_test_20, y_pred_80))
print("MAE:", mean_absolute_error(y_test_20, y_pred_80))

# Gradient Boosting (70-30)
model_70 = GradientBoostingRegressor(n_estimators=100, learning_rate=0.1, random_state=42)
model_70.fit(X_train_70, y_train_70)
y_pred_70 = model_70.predict(X_test_30)
print("Gradient Boosting (70-30 Split):")
print("MSE:", mean_squared_error(y_test_30, y_pred_70))
print("R2:", r2_score(y_test_30, y_pred_70))
print("MAE:", mean_absolute_error(y_test_30, y_pred_70))